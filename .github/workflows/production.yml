name: Production workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Step 1: Call the Common Workflow.
  common-workflow:
    uses: ./.github/workflows/common.yml  # Reference the reusable workflow.
    permissions:
      contents: read
      pull-requests: read

  build-and-push:
    needs: common-workflow  # Ensure common workflow completes before proceeding.
    runs-on: ubuntu-latest

    steps:
    # Step 2: Check out the repository.
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 3: Set up Go.
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable

    # Step 4: Create .env File for MongoDB.
    - name: Create .env file for MongoDB
      run: |
        echo "MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" > infrastructure/script/data/repository/mongo/.env
        echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}" >> infrastructure/script/data/repository/mongo/.env
        echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> infrastructure/script/data/repository/mongo/.env
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> infrastructure/script/data/repository/mongo/.env
        echo "ADMIN_HASHED_PASSWORD=${{ secrets.ADMIN_HASHED_PASSWORD }}" >> infrastructure/script/data/repository/mongo/.env

    # Step 5: Decode and Create YAML File.
    - name: Decode and Create YAML File
      run: |
        echo "${{ secrets.DOCKER_production_APPLICATION_CONFIG_YAML }}" | base64 -d > config/yaml/v1/docker.production.application.yaml

    # Step 6: Start MongoDB and App Production Containers.
    - name: Start MongoDB and App Production Containers
      run: |
        docker compose up mongodb -d
        sleep 32  # Wait for MongoDB to start
        
        docker compose up app-production -d
        sleep 4  # Wait for the app container to initialize
        docker logs go-blog-platform-app-production-1

    # Step 7: List All Running Containers.
    - name: List All Running Containers
      run: docker ps

    # Step 8: Stop Running Containers.
    - name: Stop Running Containers
      run: docker stop $(docker ps -a -q)

    # Step 9: Log in to DockerHub.
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # Step 10: Determine Version Tag.
    - name: Determine Version Tag
      id: version
      run: |
        # Fetch all Git tags
        git fetch --tags
        
        # Get the latest tag (without incrementation)
        LATEST_TAG=$(git tag -l --sort=-v:refname | head -n 1)

        # Set the version to the latest tag
        VERSION="$LATEST_TAG"
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version Tag: $VERSION"

    # Step 11: Build Docker Image for app-production.
    - name: Build Docker Image for app-production
      run: |
        docker buildx build -f infrastructure/deployment/docker/Dockerfile.production -t ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-production:${{ env.VERSION }} . --cache-from ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-production:latest --push
        docker buildx build -f infrastructure/deployment/docker/Dockerfile.production -t ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-production:latest . --cache-from ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-production:${{ env.VERSION }} --push

    # Step 12: Push Docker Image to Registry.
    - name: Push Docker Image
      run: |
        docker push ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-production:${{ env.VERSION }}
        docker push ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-production:latest
    