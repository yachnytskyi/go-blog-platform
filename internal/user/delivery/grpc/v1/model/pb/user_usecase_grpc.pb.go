// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: user_usecase.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserUseCaseClient is the client API for UserUseCase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserUseCaseClient interface {
	Register(ctx context.Context, in *UserCreate, opts ...grpc.CallOption) (*GenericResponse, error)
	Login(ctx context.Context, in *LoginUser, opts ...grpc.CallOption) (*LoginUserView, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*UserView, error)
}

type userUseCaseClient struct {
	cc grpc.ClientConnInterface
}

func NewUserUseCaseClient(cc grpc.ClientConnInterface) UserUseCaseClient {
	return &userUseCaseClient{cc}
}

func (c *userUseCaseClient) Register(ctx context.Context, in *UserCreate, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/model.UserUseCase/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUseCaseClient) Login(ctx context.Context, in *LoginUser, opts ...grpc.CallOption) (*LoginUserView, error) {
	out := new(LoginUserView)
	err := c.cc.Invoke(ctx, "/model.UserUseCase/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUseCaseClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, "/model.UserUseCase/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userUseCaseClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*UserView, error) {
	out := new(UserView)
	err := c.cc.Invoke(ctx, "/model.UserUseCase/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserUseCaseServer is the server API for UserUseCase service.
// All implementations must embed UnimplementedUserUseCaseServer
// for forward compatibility
type UserUseCaseServer interface {
	Register(context.Context, *UserCreate) (*GenericResponse, error)
	Login(context.Context, *LoginUser) (*LoginUserView, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*GenericResponse, error)
	GetMe(context.Context, *GetMeRequest) (*UserView, error)
	mustEmbedUnimplementedUserUseCaseServer()
}

// UnimplementedUserUseCaseServer must be embedded to have forward compatible implementations.
type UnimplementedUserUseCaseServer struct {
}

func (UnimplementedUserUseCaseServer) Register(context.Context, *UserCreate) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserUseCaseServer) Login(context.Context, *LoginUser) (*LoginUserView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserUseCaseServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedUserUseCaseServer) GetMe(context.Context, *GetMeRequest) (*UserView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedUserUseCaseServer) mustEmbedUnimplementedUserUseCaseServer() {}

// UnsafeUserUseCaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserUseCaseServer will
// result in compilation errors.
type UnsafeUserUseCaseServer interface {
	mustEmbedUnimplementedUserUseCaseServer()
}

func RegisterUserUseCaseServer(s grpc.ServiceRegistrar, srv UserUseCaseServer) {
	s.RegisterService(&UserUseCase_ServiceDesc, srv)
}

func _UserUseCase_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUseCaseServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.UserUseCase/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUseCaseServer).Register(ctx, req.(*UserCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUseCase_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUseCaseServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.UserUseCase/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUseCaseServer).Login(ctx, req.(*LoginUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUseCase_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUseCaseServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.UserUseCase/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUseCaseServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserUseCase_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserUseCaseServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.UserUseCase/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserUseCaseServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserUseCase_ServiceDesc is the grpc.ServiceDesc for UserUseCase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserUseCase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.UserUseCase",
	HandlerType: (*UserUseCaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserUseCase_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserUseCase_Login_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _UserUseCase_VerifyEmail_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _UserUseCase_GetMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_usecase.proto",
}
