name: Develop Workflow with Version Tagging and Git Tag Sync

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Generate Version Tag (Start with 1.0.0 or Increment)
    - name: Generate Version Tag
      id: version
      run: |
        # Fetch all tags
        git fetch --tags

        # Get the latest tag or default to 1.0.0
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")

        # Parse the version (major.minor.patch)
        IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
        PATCH=$((PATCH+1)) # Increment the patch version

        # Try to generate a unique tag
        NEW_TAG="$MAJOR.$MINOR.$PATCH"
        
        # Loop until we find a tag that does not exist
        while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
          PATCH=$((PATCH+1))  # Increment patch version again
          NEW_TAG="$MAJOR.$MINOR.$PATCH"
        done

        # Output the new tag for use in later steps
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        echo "Generated Tag: $NEW_TAG"

    # Step 4: Push New Git Tag
    - name: Push New Git Tag
      if: ${{ success() }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        # Create and push the new tag
        git tag ${{ env.NEW_TAG }}
        git push origin ${{ env.NEW_TAG }}

    # Step 5: Set up Go
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable

    # Step 6: Decode and Create YAML File
    - name: Decode and Create YAML File
      run: |
        echo "${{ secrets.DOCKER_DEVELOP_APPLICATION_CONFIG_YAML }}" | base64 -d > config/yaml/v1/docker.develop.application.yaml

    # Step 7: Create .env File for MongoDB
    - name: Create .env File for MongoDB
      run: |
        echo "MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" > infrastructure/script/data/repository/mongo/.env
        echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}" >> infrastructure/script/data/repository/mongo/.env
        echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> infrastructure/script/data/repository/mongo/.env
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> infrastructure/script/data/repository/mongo/.env
        echo "ADMIN_HASHED_PASSWORD=${{ secrets.ADMIN_HASHED_PASSWORD }}" >> infrastructure/script/data/repository/mongo/.env

    # Step 8: Build Docker Image
        - name: Build Docker Image
      run: |
        docker buildx build -f infrastructure/deployment/docker/Dockerfile.develop -t ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-develop:${{ env.NEW_TAG }} . --push
        docker buildx build -f infrastructure/deployment/docker/Dockerfile.develop -t ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-develop:latest . --push

    # Step 9: Push Docker Image to Registry
    - name: Push Docker Image
      run: |
        docker push {{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-develop:${{ env.NEW_TAG }}
        docker push {{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-develop:latest

    # Step 10: Deploy with Docker Compose
    - name: Deploy with Docker Compose
      run: |
        docker compose up -d
        docker ps

    # Step 11: Stop and Clean Up Containers
    - name: Stop Running Containers
      run: docker stop $(docker ps -a -q)
