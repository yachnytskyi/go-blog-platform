name: Develop Workflow with Version Tagging and Git Tag Sync

on:
  pull_request:
    branches: [ "develop" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Manually specify the version'
        required: false
        default: ''

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - name: Checkout Code
      uses: actions/checkout@v4

    # Step 2: Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Determine Version Tag (Use Git tag or fallback to auto-increment)
    - name: Determine Version Tag
      id: version
      run: |
        # If a version is provided via the workflow dispatch input, use it
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # If no version is provided, fetch the latest Git tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")

          # Parse the version (major.minor.patch)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          PATCH=$((PATCH+1))  # Increment the patch version
          
          VERSION="v$MAJOR.$MINOR.$PATCH"
        fi

        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version Tag: $VERSION"

    # Step 4: Push New Git Tag
    - name: Push New Git Tag
      if: ${{ success() }}
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Create and push the new tag
        git tag "${{ env.VERSION }}"
        git push origin "${{ env.VERSION }}"

    # Step 5: Set up Go
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable

    # Step 6: Decode and Create YAML File
    - name: Decode and Create YAML File
      run: |
        echo "${{ secrets.DOCKER_DEVELOP_APPLICATION_CONFIG_YAML }}" | base64 -d > config/yaml/v1/docker.develop.application.yaml

    # Step 7: Create .env File for MongoDB
    - name: Create .env File for MongoDB
      run: |
        echo "MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" > infrastructure/script/data/repository/mongo/.env
        echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}" >> infrastructure/script/data/repository/mongo/.env
        echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> infrastructure/script/data/repository/mongo/.env
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> infrastructure/script/data/repository/mongo/.env
        echo "ADMIN_HASHED_PASSWORD=${{ secrets.ADMIN_HASHED_PASSWORD }}" >> infrastructure/script/data/repository/mongo/.env

    # Step 8: Build and Push Docker Images for app-develop
    - name: Build Docker Image for app-develop
      run: |
        docker compose up mongodb -d 
        sleep 32  # Wait for MongoDB to start

        docker compose up app-develop -d
        sleep 4  # Wait for the app container to initialize
        docker logs go-blog-platform-app-develop-1

        docker buildx build -f infrastructure/deployment/docker/Dockerfile.develop -t ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-develop:${{ env.VERSION }} . --push
        docker buildx build -f infrastructure/deployment/docker/Dockerfile.develop -t ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-develop:latest . --push

    # Step 9: List All Running Containers
    - name: List All Running Containers
      run: docker ps

    # Step 10: Push Docker Image to Registry
    - name: Push Docker Image
      run: |
        docker push ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-develop:${{ env.VERSION }}
        docker push ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}/app-develop:latest

    # Step 12: Stop Running Containers
    - name: Stop Running Containers
      run: docker stop $(docker ps -a -q)
