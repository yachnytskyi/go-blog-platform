// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: post_usecase.proto

package model

import (
	context "context"
	model "github.com/yachnytskyi/golang-mongo-grpc/internal/post/delivery/grpc/v1/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostUseCase_GetPost_FullMethodName    = "/model.PostUseCase/GetPost"
	PostUseCase_GetPosts_FullMethodName   = "/model.PostUseCase/GetPosts"
	PostUseCase_CreatePost_FullMethodName = "/model.PostUseCase/CreatePost"
	PostUseCase_UpdatePost_FullMethodName = "/model.PostUseCase/UpdatePost"
	PostUseCase_DeletePost_FullMethodName = "/model.PostUseCase/DeletePost"
)

// PostUseCaseClient is the client API for PostUseCase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostUseCaseClient interface {
	GetPost(ctx context.Context, in *PostById, opts ...grpc.CallOption) (*model.PostView, error)
	GetPosts(ctx context.Context, in *Posts, opts ...grpc.CallOption) (PostUseCase_GetPostsClient, error)
	CreatePost(ctx context.Context, in *model.PostCreate, opts ...grpc.CallOption) (*model.PostView, error)
	UpdatePost(ctx context.Context, in *model.PostUpdate, opts ...grpc.CallOption) (*model.PostView, error)
	DeletePost(ctx context.Context, in *PostById, opts ...grpc.CallOption) (*PostDeleteView, error)
}

type postUseCaseClient struct {
	cc grpc.ClientConnInterface
}

func NewPostUseCaseClient(cc grpc.ClientConnInterface) PostUseCaseClient {
	return &postUseCaseClient{cc}
}

func (c *postUseCaseClient) GetPost(ctx context.Context, in *PostById, opts ...grpc.CallOption) (*model.PostView, error) {
	out := new(model.PostView)
	err := c.cc.Invoke(ctx, PostUseCase_GetPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postUseCaseClient) GetPosts(ctx context.Context, in *Posts, opts ...grpc.CallOption) (PostUseCase_GetPostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PostUseCase_ServiceDesc.Streams[0], PostUseCase_GetPosts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &postUseCaseGetPostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PostUseCase_GetPostsClient interface {
	Recv() (*model.Post, error)
	grpc.ClientStream
}

type postUseCaseGetPostsClient struct {
	grpc.ClientStream
}

func (x *postUseCaseGetPostsClient) Recv() (*model.Post, error) {
	m := new(model.Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *postUseCaseClient) CreatePost(ctx context.Context, in *model.PostCreate, opts ...grpc.CallOption) (*model.PostView, error) {
	out := new(model.PostView)
	err := c.cc.Invoke(ctx, PostUseCase_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postUseCaseClient) UpdatePost(ctx context.Context, in *model.PostUpdate, opts ...grpc.CallOption) (*model.PostView, error) {
	out := new(model.PostView)
	err := c.cc.Invoke(ctx, PostUseCase_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postUseCaseClient) DeletePost(ctx context.Context, in *PostById, opts ...grpc.CallOption) (*PostDeleteView, error) {
	out := new(PostDeleteView)
	err := c.cc.Invoke(ctx, PostUseCase_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostUseCaseServer is the server API for PostUseCase service.
// All implementations must embed UnimplementedPostUseCaseServer
// for forward compatibility
type PostUseCaseServer interface {
	GetPost(context.Context, *PostById) (*model.PostView, error)
	GetPosts(*Posts, PostUseCase_GetPostsServer) error
	CreatePost(context.Context, *model.PostCreate) (*model.PostView, error)
	UpdatePost(context.Context, *model.PostUpdate) (*model.PostView, error)
	DeletePost(context.Context, *PostById) (*PostDeleteView, error)
	mustEmbedUnimplementedPostUseCaseServer()
}

// UnimplementedPostUseCaseServer must be embedded to have forward compatible implementations.
type UnimplementedPostUseCaseServer struct {
}

func (UnimplementedPostUseCaseServer) GetPost(context.Context, *PostById) (*model.PostView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostUseCaseServer) GetPosts(*Posts, PostUseCase_GetPostsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedPostUseCaseServer) CreatePost(context.Context, *model.PostCreate) (*model.PostView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostUseCaseServer) UpdatePost(context.Context, *model.PostUpdate) (*model.PostView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostUseCaseServer) DeletePost(context.Context, *PostById) (*PostDeleteView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostUseCaseServer) mustEmbedUnimplementedPostUseCaseServer() {}

// UnsafePostUseCaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostUseCaseServer will
// result in compilation errors.
type UnsafePostUseCaseServer interface {
	mustEmbedUnimplementedPostUseCaseServer()
}

func RegisterPostUseCaseServer(s grpc.ServiceRegistrar, srv PostUseCaseServer) {
	s.RegisterService(&PostUseCase_ServiceDesc, srv)
}

func _PostUseCase_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostUseCaseServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostUseCase_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostUseCaseServer).GetPost(ctx, req.(*PostById))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostUseCase_GetPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Posts)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PostUseCaseServer).GetPosts(m, &postUseCaseGetPostsServer{stream})
}

type PostUseCase_GetPostsServer interface {
	Send(*model.Post) error
	grpc.ServerStream
}

type postUseCaseGetPostsServer struct {
	grpc.ServerStream
}

func (x *postUseCaseGetPostsServer) Send(m *model.Post) error {
	return x.ServerStream.SendMsg(m)
}

func _PostUseCase_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostUseCaseServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostUseCase_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostUseCaseServer).CreatePost(ctx, req.(*model.PostCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostUseCase_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.PostUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostUseCaseServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostUseCase_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostUseCaseServer).UpdatePost(ctx, req.(*model.PostUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostUseCase_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostUseCaseServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostUseCase_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostUseCaseServer).DeletePost(ctx, req.(*PostById))
	}
	return interceptor(ctx, in, info, handler)
}

// PostUseCase_ServiceDesc is the grpc.ServiceDesc for PostUseCase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostUseCase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.PostUseCase",
	HandlerType: (*PostUseCaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPost",
			Handler:    _PostUseCase_GetPost_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PostUseCase_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostUseCase_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostUseCase_DeletePost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPosts",
			Handler:       _PostUseCase_GetPosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "post_usecase.proto",
}
